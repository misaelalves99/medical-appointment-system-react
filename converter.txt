(Converta esse código C# Asp.NET e css para React 19+ com TypeScript)
(Converta o CSS em CSS modules)
(Sempre coloque o caminho do arquivo no topo do código comentado)

using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;

namespace MedicalAppointmentSystem.Extensions
{
    public static class EnumExtensions
    {
        public static string GetDisplayName(this Enum enumValue)
        {
            return enumValue.GetType()
                .GetMember(enumValue.ToString())
                .FirstOrDefault()?
                .GetCustomAttribute<DisplayAttribute>()?
                .Name ?? enumValue.ToString();
        }
    }
}

using System.ComponentModel.DataAnnotations;

namespace MedicalAppointmentSystem.Models
{
    public class Address
    {
        public int Id { get; set; }

        [Required]
        public required string Street { get; set; }

        [Required]
        public required string City { get; set; }

        [Required]
        public required string State { get; set; }

        [Required]
        public required string ZipCode { get; set; }

        public string? Complement { get; set; }
    }
}

using System.ComponentModel.DataAnnotations;

namespace MedicalAppointmentSystem.Models
{
    public class ContactInfo
    {
        public int Id { get; set; }

        [Phone]
        public string? Phone { get; set; }

        [EmailAddress]
        public string? Email { get; set; }

        public string? EmergencyContact { get; set; }

        public string? EmergencyPhone { get; set; }
    }
}

namespace MedicalAppointmentSystem.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

// using System;
// using System.Collections.Generic;
// using System.ComponentModel.DataAnnotations;
// using System.ComponentModel.DataAnnotations.Schema;

using System.ComponentModel.DataAnnotations;

namespace MedicalAppointmentSystem.Models
{
    public abstract class Person
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "O nome é obrigatório.")]
        [StringLength(100)]
        public string Name { get; set; } = string.Empty;

        // Adicionado para consistência com os Razor Views e para ser herdado por Doctor e Patient
        [EmailAddress(ErrorMessage = "Formato de e-mail inválido.")]
        [StringLength(100)]
        public string? Email { get; set; }

        [Phone(ErrorMessage = "Formato de telefone inválido.")]
        [StringLength(20)]
        public string? Phone { get; set; }
    }
} (Converta para types)
